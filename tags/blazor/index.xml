<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blazor on Nintens&#39;s Blogs </title>
    <link>http://www.nintens.com/tags/blazor/</link>
    <description>Recent content in blazor on Nintens&#39;s Blogs </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Nintens@2022 Copywright</copyright>
    <lastBuildDate>Sat, 19 Mar 2022 11:25:05 -0400</lastBuildDate><atom:link href="http://www.nintens.com/tags/blazor/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Blazor Server构建企业级应用(一) -- 概述</title>
      <link>http://www.nintens.com/posts/blazorserver1/</link>
      <pubDate>Sat, 19 Mar 2022 11:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver1/</guid>
      <description>本文系列文章主要记述构建基于表单的简易Low-Code平台过程中的技术选型和实现的相关技术点。 整体架构采用Blazor Server, MudBlazor等技术实现。平台运行在CentOs 7服务器，基于Docker-Compose运行。 使用AzureDevops进行代码管理和发布。
本系列文章分别描述以下技术点
 Blazor Server项目创建 EntityFrameWork以及MySql集成 Docker-Compose制作和发布以及单机调试 客户端机密信息存储机制 Docker自动化构建 Linux平台生产机器发布 Asp.net Identity身份验证集成 Asp.net Identity画面定制化开发 DDD基础框架 自动化测试 基于Cookie和Token的身份验证 Blazor Server集成 WebAPI服务 使用MudBlazor 日志记录机制和日志查看功能 Blazor Server的异步处理 Blazor的多语言处理 Blazor的业务数据的时区处理  </description>
    </item>
    
  </channel>
</rss>
