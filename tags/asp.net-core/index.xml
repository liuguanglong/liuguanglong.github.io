<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>asp.net core on Nintens&#39; Blogs </title>
    <link>http://www.nintens.com/tags/asp.net-core/</link>
    <description>Recent content in asp.net core on Nintens&#39; Blogs </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Nintens@2022 Copywright</copyright>
    <lastBuildDate>Sun, 10 Apr 2022 23:25:05 -0400</lastBuildDate><atom:link href="http://www.nintens.com/tags/asp.net-core/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Blazor Server构建企业级应用(六) -- 提供基于Token的身份验证的WebApi服务</title>
      <link>http://www.nintens.com/posts/blazorserver6/</link>
      <pubDate>Sun, 10 Apr 2022 23:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver6/</guid>
      <description>使用Blazor Server构建企业级应用（六) 提供基于Token的身份验证的WebApi服务 本文地址：http://www.nintens.com/posts/blazorserver6/
作者邮箱：liuguanglong@yahoo.com
欢迎转载，请在明显位置给出出处及链接
本文是nintens架构系列文章的第六篇，包含以下内容
 提供基于Webapi Restful服务供外部系统访问 使用Swagger提供Webapi接口信息 配置WebApi服务添加身份和权限验证 配置Swagger身份验证  一 提供基于Webapi Restful服务供外部系统访问  添加WebApi Controller类，用来提供restful服务
在nintens项目下添加Controller文件夹，添加一个FetchDataController类
FetchDataContrller的路由到 baseurl/api/FetchData
类中的GetWeacherForeCast访问被映射到默认的Get请求  [Route(&amp;#34;api/[controller]&amp;#34;)] [ApiController] public class FetchDataController : ControllerBase {  WeatherForecastService service;  public FetchDataController(WeatherForecastService taskService)  {  this.service = taskService;  } [HttpGet]  public async Task&amp;lt;ActionResult&amp;lt;IEnumerable&amp;lt;WeatherForecast&amp;gt;&amp;gt;&amp;gt; GetWeatherForecast()  {  var forecasts = await service.getWeatherForecasts();  return Ok(forecasts);  } } 项目中添加配置支持Controller
在Program.cs文件中加入以下代码  app.</description>
    </item>
    
    <item>
      <title>使用Blazor Server构建企业级应用(五) -- 使用asp.net Identity完成功能的权限控制</title>
      <link>http://www.nintens.com/posts/blazorserver5/</link>
      <pubDate>Sat, 09 Apr 2022 23:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver5/</guid>
      <description>使用Blazor Server构建企业级应用(五) 使用asp.net Identity完成功能的权限控制 本文地址：http://www.nintens.com/posts/blazorserver5/
作者邮箱：liuguanglong@yahoo.com 欢迎转载，请在明显位置给出出处及链接
本文是nintens架构系列文章的第五篇，包含以下内容
 扩展IdentityUser类用来保存业务上的扩展数据 使用Asp.net Identity Role实现用户权限控制  一 给IdentityUser扩展字段  在respository项目中追加ApplicationUser类，用来扩展字段  public class ApplicationUser : IdentityUser {  public string? CustomTag { get; set; } } 在mysql数据库中的aspnetusers表中添加CustomTag字段  修改ApplicationContxt类,使用ApplicationUser类替代Identity中默认提供的IdentityUser类  public class ApplicationDbContext : IdentityDbContext&amp;lt;ApplicationUser&amp;gt; {  public ApplicationDbContext(DbContextOptions&amp;lt;ApplicationDbContext&amp;gt; options)  : base(options)  {  }   protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)  {  }  protected override void OnModelCreating(ModelBuilder builder)  {  base.</description>
    </item>
    
    <item>
      <title>使用Blazor Server构建企业级应用(四) -- 添加asp.net Identity用来完成授权和用户权限控制</title>
      <link>http://www.nintens.com/posts/blazorserver4/</link>
      <pubDate>Tue, 05 Apr 2022 21:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver4/</guid>
      <description>使用Blazor Server构建企业级应用(四) 添加asp.net Identity用来完成授权和用户权限控制 本文地址：http://www.nintens.com/posts/blazorserver4/
作者邮箱：liuguanglong@yahoo.com 欢迎转载，请在明显位置给出出处及链接
本文是nintens架构系列文章的第四篇，包含以下内容
 添加asp.net Identity使用的数据库表 在项目中添加asp.net Identity相关配置 配置应用权限要求用户登录才能访问 添加asp.net Identity自带的功能画面  一 添加asp.net Identity使用的数据库表  在数据库中创建asp.NET Identity用到的数据库表  在mysql中执行Identity.sql添加Identity用到的7张表到nintens数据库
Identity.sql默认会创建Administrators角色，同时会创建一个超级管理员用户 liuguanglong@yahoo.com，请修改为默认的管理员用户。
这个邮箱会用来获取更新用的密码。创建数据库表请修改。
下载链接: 创建数据库用的Sql文件
添加用户验证用的DBContext  在repository中引入asp.NET Identity相关的包
 Install-Package Microsoft.aspNetCore.Identity.EntityFrameworkCore 在repository项目中添加ApplicationDBContext类
 public class ApplicationDbContext : IdentityDbContext  {  public ApplicationDbContext(DbContextOptions&amp;lt;ApplicationDbContext&amp;gt; options)  : base(options)  {  }  } 二 在项目中添加asp.ent Identity相关配置  nintens项目配置  引入asp.NET Identity相关的包
 Install-Package Microsoft.aspNetCore.Identity.EntityFrameworkCore  Install-Package Microsoft.</description>
    </item>
    
    <item>
      <title>使用Blazor Server构建企业级应用(三) -- 使用Serilog记录和显示业务日志</title>
      <link>http://www.nintens.com/posts/blazorserver3/</link>
      <pubDate>Sat, 02 Apr 2022 23:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver3/</guid>
      <description>使用Blazor Server构建企业级应用(三) 使用Serilog记录和显示业务日志 本文地址：http://www.nintens.com/posts/blazorserver3/
作者邮箱：liuguanglong@yahoo.com
欢迎转载，请在明显位置给出出处及链接
本文是nintens架构系列文章的第三篇，包含以下内容
 Serilog基本配置 Serilog logCentext扩展 业务日志记录方案  一 Serilog基础配置  给blazor server添加Serilog相关依赖包。在程序包管理器控制台窗口中输入以下命令   Install-Package Serilog.AspNetCore  Install-Package Serilog.Settings.Configuration  Install-Package Serilog.Sinks.MariaDB 在数据库中创建用来保存日志的表  CREATETABLE`logs`(`Id`bigintNOTNULLAUTO_INCREMENT,`EventId`varchar(90)DEFAULTNULL,`Timestamp`datetimeDEFAULTNULL,`Message`text,`User`varchar(45)DEFAULTNULL,`Ip`varchar(25)DEFAULTNULL,`Level`varchar(15)DEFAULTNULL,`Exception`text,`MessageTemplate`text,`Properties`text,PRIMARYKEY(`Id`))ENGINE=InnoDBAUTO_INCREMENT=26DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_0900_ai_ci;添加Serilog的配置信息  因为我们要将日志保存在数据中，所以为了保护数据库连接信息，我们将serilog信息保存在secrets.json文件中。
选择nintens项目，右键弹出菜单中选择 管理用户机密。
在打开的窗口中编辑secrets.json文件，添加以下配置信息
&amp;#34;Serilog&amp;#34;: {  &amp;#34;Using&amp;#34;: [ &amp;#34;Serilog.Sinks.Console&amp;#34;, &amp;#34;Serilog.Sinks.File&amp;#34;, &amp;#34;Serilog.Sinks.MariaDB&amp;#34; ],  &amp;#34;Enrich&amp;#34;: [ &amp;#34;FromLogContext&amp;#34;, &amp;#34;WithMachineName&amp;#34;, &amp;#34;WithProcessId&amp;#34;, &amp;#34;WithThreadId&amp;#34; ],  &amp;#34;MinimumLevel&amp;#34;: {  &amp;#34;Default&amp;#34;: &amp;#34;Debug&amp;#34;,  &amp;#34;Override&amp;#34;: {  &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;,  &amp;#34;System&amp;#34;: &amp;#34;Warning&amp;#34;  }  },  &amp;#34;WriteTo&amp;#34;: [  {  &amp;#34;Name&amp;#34;: &amp;#34;Console&amp;#34;,  &amp;#34;Args&amp;#34;: {  &amp;#34;outputTemplate&amp;#34;: &amp;#34;{Timestamp:HH:mm:ss} [{Level}] [{EventId:l}] [{User}] [{IP}] {Message}{NewLine}{Exception}&amp;#34;,  &amp;#34;restrictedToMinimumLevel&amp;#34;: &amp;#34;Debug&amp;#34;  }  },  {  &amp;#34;Name&amp;#34;: &amp;#34;File&amp;#34;,  &amp;#34;Args&amp;#34;: {  &amp;#34;path&amp;#34;: &amp;#34;logs/log.</description>
    </item>
    
    <item>
      <title>使用Blazor Server构建企业级应用(二) -- 使用MudBlazor搭建UI框架</title>
      <link>http://www.nintens.com/posts/blazorserver2/</link>
      <pubDate>Wed, 30 Mar 2022 20:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver2/</guid>
      <description>使用Blazor Server构建企业级应用(二) 使用MudBlazor搭建UI框架 本文地址：http://www.nintens.com/posts/blazorserver2/
作者邮箱：liuguanglong@yahoo.com
欢迎转载，请在明显位置给出出处及链接
本文是nintens架构系列文章的第二篇，包含以下内容
 MudBlazor基本配置 配置UI Layout 修改App应用图标，标题内容 配置App菜单 配置App LoginDisplay  一 引用MudBlazor  给blazor server添加MudBlazor包。在程序包管理器控制台窗口中输入以下命令   Install-Package MudBlazor 将MudBlazor名字空间引入项目
在blazor server项目下的_Imports.razor中添加以下代码   @using MudBlazor 引入MudBlazor的字体和格式配置  打开_Layout.cshtml文件，在head部分中加入如下代码
 &amp;lt;link href=&amp;#34;https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap&amp;#34; rel=&amp;#34;stylesheet&amp;#34; /&amp;gt;  &amp;lt;link href=&amp;#34;_content/MudBlazor/MudBlazor.min.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; /&amp;gt;  &amp;lt;script src=&amp;#34;_content/MudBlazor/MudBlazor.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 将MudBlazor Service注入到App中  打开Startup.cs文件在ConfigureServices函数中添加以下代码。这部分代码包含了Snackbar的配置信息。 Snackbar的详细配置信息可以参考Mudblazor网站帮助信息。
public void ConfigureServices(IServiceCollection services){... ...services.AddMudServices(config =&amp;gt;{config.SnackbarConfiguration.PositionClass = Defaults.Classes.Position.TopRight;config.SnackbarConfiguration.PreventDuplicates = false;config.SnackbarConfiguration.NewestOnTop = false;config.</description>
    </item>
    
    <item>
      <title>使用Blazor Server构建企业级应用(一) -- 基础架构</title>
      <link>http://www.nintens.com/posts/blazorserver1/</link>
      <pubDate>Tue, 29 Mar 2022 11:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver1/</guid>
      <description>使用Blazor Server构建企业级应用(一) Blazor Server 6.0 + Modal + Repository + Service + EnitityFrameWork Core + MySql + Data Protection
本文地址：http://www.nintens.com/posts/blazorserver1/
作者邮箱：liuguanglong@yahoo.com
欢迎转载，请在明显位置给出出处及链接
本文是nintens架构系列文章的第一篇，包含以下内容
 创建Blazor Server 6.0工程 创建基于Enitity Framework6.0 访问mysql数据库的 Repository项目 完成Repository项目的功能测试 创建Service项目 完成Service项目的功能测试 完成Blazor Server的服务注入 完成配置信息的客户端数据保护  一 创建Blazor Server工程   使用Vs2020创建BlazorServer类型项目
选择Blazor Server应用
设置Project信息
  .net框架选择
选择 .Net 6.0
  选择不支持身份验证。 我们稍后再加入Asp.NET Core Identity身份验证功能。 选择不启动Docker相关功能。 我们后期加入对Docker的支持。
成功创建的项目
  项目就创建好后，打开launchSetting.json文件可以修改Debug时的参数配置。 对于Self Host，默认端口是5007. 对于IIS Host模式端口使用2551. 可以按照个人需要进行修改。</description>
    </item>
    
  </channel>
</rss>
