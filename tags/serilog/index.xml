<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serilog on Nintens&#39; Blogs </title>
    <link>http://www.nintens.com/tags/serilog/</link>
    <description>Recent content in Serilog on Nintens&#39; Blogs </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Nintens@2022 Copywright</copyright>
    <lastBuildDate>Sun, 17 Apr 2022 23:25:05 -0400</lastBuildDate><atom:link href="http://www.nintens.com/tags/serilog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Blazor Server构建企业级应用(七) -- 按照时区表示时间类型数据</title>
      <link>http://www.nintens.com/posts/blazorserver7/</link>
      <pubDate>Sun, 17 Apr 2022 23:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver7/</guid>
      <description>使用Blazor Server构建企业级应用(七) &amp;ndash; 按照时区表示时间类型数据 本文地址：http://www.nintens.com/posts/blazorserver7/
作者邮箱：liuguanglong@yahoo.com
欢迎转载，请在明显位置给出出处及链接
本文是nintens架构系列文章的第七篇，包含以下内容
 日期类行数据的存储 支持用户设置自己所在时区 按照用户所在时区展示时间数据  一 日期类行数据的存储  保存时将时间类数据保存为UTC时间
时间类型的数据定义为DateTime类型，在Mysql中字段类型使用DATETIME。
成员属性和数据库字段映射列类型为timestamp.  映射代码例子如下
modelBuilder.Entity&amp;lt;OperationLog&amp;gt;().Property(u =&amp;gt; u.Timestamp).HasColumnType(&amp;#34;timestamp&amp;#34;).IsRequired(true); 类实例创建时类成员的值取UTC时间
 a.Timestamp = DateTime.UtcNow; 二 支持用户设置自己所在时区  保存用户时区信息 扩展ApplicationUser的属性，添加TimeZoneId信息   public class ApplicationUser : IdentityUser  {  public string? CustomTag { get; set; }  public string? TimeZoneId { get; set; } = TimeZoneInfo.Local.Id;  } 修改数据库中aspnetusers表定义，添加一个TimeZoneId字段，类型为VARCHAR(45)
添加ApplicationUser的服务类
实现根据用户名获取用户信息和更新TimeZone信息的方法   public class ApplicationIdentityService  {  private IDbContextFactory&amp;lt;ApplicationDbContext&amp;gt; contextFactory;   public ApplicationIdentityService(IDbContextFactory&amp;lt;ApplicationDbContext&amp;gt; contextFactory)  {  this.</description>
    </item>
    
    <item>
      <title>使用Blazor Server构建企业级应用(三) -- 使用Serilog记录和显示业务日志</title>
      <link>http://www.nintens.com/posts/blazorserver3/</link>
      <pubDate>Sat, 02 Apr 2022 23:25:05 -0400</pubDate>
      
      <guid>http://www.nintens.com/posts/blazorserver3/</guid>
      <description>使用Blazor Server构建企业级应用(三) 使用Serilog记录和显示业务日志 本文地址：http://www.nintens.com/posts/blazorserver3/
作者邮箱：liuguanglong@yahoo.com
欢迎转载，请在明显位置给出出处及链接
本文是nintens架构系列文章的第三篇，包含以下内容
 Serilog基本配置 Serilog logCentext扩展 业务日志记录方案  一 Serilog基础配置  给blazor server添加Serilog相关依赖包。在程序包管理器控制台窗口中输入以下命令   Install-Package Serilog.AspNetCore  Install-Package Serilog.Settings.Configuration  Install-Package Serilog.Sinks.MariaDB 在数据库中创建用来保存日志的表  CREATETABLE`logs`(`Id`bigintNOTNULLAUTO_INCREMENT,`EventId`varchar(90)DEFAULTNULL,`Timestamp`datetimeDEFAULTNULL,`Message`text,`User`varchar(45)DEFAULTNULL,`Ip`varchar(25)DEFAULTNULL,`Level`varchar(15)DEFAULTNULL,`Exception`text,`MessageTemplate`text,`Properties`text,PRIMARYKEY(`Id`))ENGINE=InnoDBAUTO_INCREMENT=26DEFAULTCHARSET=utf8mb4COLLATE=utf8mb4_0900_ai_ci;添加Serilog的配置信息  因为我们要将日志保存在数据中，所以为了保护数据库连接信息，我们将serilog信息保存在secrets.json文件中。
选择nintens项目，右键弹出菜单中选择 管理用户机密。
在打开的窗口中编辑secrets.json文件，添加以下配置信息
&amp;#34;Serilog&amp;#34;: {  &amp;#34;Using&amp;#34;: [ &amp;#34;Serilog.Sinks.Console&amp;#34;, &amp;#34;Serilog.Sinks.File&amp;#34;, &amp;#34;Serilog.Sinks.MariaDB&amp;#34; ],  &amp;#34;Enrich&amp;#34;: [ &amp;#34;FromLogContext&amp;#34;, &amp;#34;WithMachineName&amp;#34;, &amp;#34;WithProcessId&amp;#34;, &amp;#34;WithThreadId&amp;#34; ],  &amp;#34;MinimumLevel&amp;#34;: {  &amp;#34;Default&amp;#34;: &amp;#34;Debug&amp;#34;,  &amp;#34;Override&amp;#34;: {  &amp;#34;Microsoft&amp;#34;: &amp;#34;Warning&amp;#34;,  &amp;#34;System&amp;#34;: &amp;#34;Warning&amp;#34;  }  },  &amp;#34;WriteTo&amp;#34;: [  {  &amp;#34;Name&amp;#34;: &amp;#34;Console&amp;#34;,  &amp;#34;Args&amp;#34;: {  &amp;#34;outputTemplate&amp;#34;: &amp;#34;{Timestamp:HH:mm:ss} [{Level}] [{EventId:l}] [{User}] [{IP}] {Message}{NewLine}{Exception}&amp;#34;,  &amp;#34;restrictedToMinimumLevel&amp;#34;: &amp;#34;Debug&amp;#34;  }  },  {  &amp;#34;Name&amp;#34;: &amp;#34;File&amp;#34;,  &amp;#34;Args&amp;#34;: {  &amp;#34;path&amp;#34;: &amp;#34;logs/log.</description>
    </item>
    
  </channel>
</rss>
